// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TallyJ4.Data;

namespace TallyJ4.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TallyJ4.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Ballot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BallotGuid");

                    b.Property<int>("BallotNumAtComputer");

                    b.Property<string>("C_BallotCode");

                    b.Property<byte[]>("C_RowVersion");

                    b.Property<string>("ComputerCode");

                    b.Property<Guid>("LocationGuid");

                    b.Property<string>("StatusCode");

                    b.Property<string>("Teller1");

                    b.Property<string>("Teller2");

                    b.HasKey("Id");

                    b.ToTable("Ballot");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BallotProcess");

                    b.Property<byte[]>("C_RowVersion");

                    b.Property<string>("CanReceive");

                    b.Property<string>("CanVote");

                    b.Property<string>("Convenor");

                    b.Property<DateTime?>("DateOfElection");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<string>("ElectionMode");

                    b.Property<string>("ElectionPasscode");

                    b.Property<string>("ElectionType");

                    b.Property<string>("EnvNumMode");

                    b.Property<string>("ExtraFuture1");

                    b.Property<string>("ExtraFuture2");

                    b.Property<string>("ExtraFuture3");

                    b.Property<bool?>("HidePreBallotPages");

                    b.Property<int?>("LastEnvNum");

                    b.Property<Guid?>("LinkedElectionGuid");

                    b.Property<string>("LinkedElectionKind");

                    b.Property<bool?>("ListForPublic");

                    b.Property<DateTime?>("ListedForPublicAsOf");

                    b.Property<bool?>("MaskVotingMethod");

                    b.Property<string>("Name");

                    b.Property<int?>("NumberExtra");

                    b.Property<int?>("NumberToElect");

                    b.Property<string>("OwnerLoginId");

                    b.Property<bool?>("ShowAsTest");

                    b.Property<bool?>("ShowFullReport");

                    b.Property<bool?>("T24");

                    b.Property<string>("TallyStatus");

                    b.Property<bool?>("UseCallInButton");

                    b.HasKey("Id");

                    b.HasIndex("ElectionGuid")
                        .IsUnique();

                    b.ToTable("Election");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.JoinElectionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ElectionGuid");

                    b.Property<string>("Role");

                    b.Property<Guid>("UserId");

                    b.Property<string>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("JoinElectionUser");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BallotsCollected");

                    b.Property<string>("ContactInfo");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<string>("Lat");

                    b.Property<Guid>("LocationGuid");

                    b.Property<string>("Long");

                    b.Property<string>("Name");

                    b.Property<int?>("SortOrder");

                    b.Property<string>("TallyStatus");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AsOf");

                    b.Property<string>("ComputerCode");

                    b.Property<string>("Details");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<Guid?>("LocationGuid");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.OnlineTempBallot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<string>("PersonGuidList");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OnlineTempBallots");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgeGroup");

                    b.Property<string>("Area");

                    b.Property<string>("BahaiId");

                    b.Property<string>("C_FullName");

                    b.Property<string>("C_FullNameFL");

                    b.Property<byte[]>("C_RowVersion");

                    b.Property<long?>("C_RowVersionInt");

                    b.Property<bool?>("CanReceiveVotes");

                    b.Property<bool?>("CanVote");

                    b.Property<string>("CombinedInfo");

                    b.Property<string>("CombinedInfoAtStart");

                    b.Property<string>("CombinedSoundCodes");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<string>("EmailAddress");

                    b.Property<int?>("EnvNum");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("IneligibleReasonGuid");

                    b.Property<string>("LastName");

                    b.Property<string>("OtherInfo");

                    b.Property<string>("OtherLastNames");

                    b.Property<string>("OtherNames");

                    b.Property<Guid>("PersonGuid");

                    b.Property<string>("RegistrationLog");

                    b.Property<DateTime?>("RegistrationTime");

                    b.Property<string>("Teller1");

                    b.Property<string>("Teller2");

                    b.Property<Guid?>("VotingLocationGuid");

                    b.Property<string>("VotingMethod");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("CloseToNext");

                    b.Property<bool?>("CloseToPrev");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<bool?>("ForceShowInOther");

                    b.Property<bool?>("IsTieResolved");

                    b.Property<bool?>("IsTied");

                    b.Property<Guid>("PersonGuid");

                    b.Property<int>("Rank");

                    b.Property<int?>("RankInExtra");

                    b.Property<string>("Section");

                    b.Property<int?>("TieBreakCount");

                    b.Property<int?>("TieBreakGroup");

                    b.Property<bool?>("TieBreakRequired");

                    b.Property<int?>("VoteCount");

                    b.HasKey("Id");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.ResultSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BallotsNeedingReview");

                    b.Property<int?>("BallotsReceived");

                    b.Property<int?>("CalledInBallots");

                    b.Property<int?>("DroppedOffBallots");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<int?>("InPersonBallots");

                    b.Property<int?>("MailedInBallots");

                    b.Property<int?>("NumEligibleToVote");

                    b.Property<int?>("NumVoters");

                    b.Property<string>("ResultType");

                    b.Property<int?>("SpoiledBallots");

                    b.Property<int?>("SpoiledManualBallots");

                    b.Property<int?>("SpoiledVotes");

                    b.Property<int?>("TotalVotes");

                    b.Property<bool?>("UseOnReports");

                    b.HasKey("Id");

                    b.ToTable("ResultSummary");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.ResultTie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ElectionGuid");

                    b.Property<bool?>("IsResolved");

                    b.Property<int>("NumInTie");

                    b.Property<int>("NumToElect");

                    b.Property<int>("TieBreakGroup");

                    b.Property<bool?>("TieBreakRequired");

                    b.HasKey("Id");

                    b.ToTable("ResultTie");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Teller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("C_RowVersion");

                    b.Property<Guid>("ElectionGuid");

                    b.Property<bool?>("IsHeadTeller");

                    b.Property<string>("Name");

                    b.Property<string>("UsingComputerCode");

                    b.HasKey("Id");

                    b.ToTable("Teller");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BallotGuid");

                    b.Property<byte[]>("C_RowVersion");

                    b.Property<Guid?>("InvalidReasonGuid");

                    b.Property<string>("PersonCombinedInfo");

                    b.Property<Guid?>("PersonGuid");

                    b.Property<int>("PositionOnBallot");

                    b.Property<int?>("SingleNameElectionCount");

                    b.Property<string>("StatusCode");

                    b.HasKey("Id");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TallyJ4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TallyJ4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TallyJ4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TallyJ4.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.JoinElectionUser", b =>
                {
                    b.HasOne("TallyJ4.Data.ApplicationUser", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("TallyJ4.Data.DbModel.OnlineTempBallot", b =>
                {
                    b.HasOne("TallyJ4.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("OnlineTempBallots")
                        .HasForeignKey("ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
